<html>
	<head>
		<script src="../../vendor/vr.js"></script>
		<script src="../../vendor/three.min.js"></script>
		<script src="../../vendor/vr/effects/OculusRiftEffect.js"></script>
		<script src="../../vendor/vr/controls/OculusRiftControls.js"></script>

		<style>
			canvas {
				-webkit-filter: contrast(3) hue-rotate(180deg) saturate(10);
			}
		</style>
	</head>
	<body>
		<script>
			// @see https://github.com/benvanik/vr.js/blob/master/examples/threejs_boxes_demo.html
			// @see http://stemkoski.github.io/Three.js/Video.html

			(function() {
				var camera, scene, renderer,
					geometry, material, mesh,
					riftControls, riftEffect,
					vrState;

				var video, videoImage, videoImageContext, videoTexture,
					videoMaterial, videoGeometry, videoScreen;

				var fov = 90,
					videoWidth = 640,
					videoHeight = 480;

				if (!vr.isInstalled()) {
					alert('NPVR plugin not installed!');
				}

				vr.load(function(error) {
					if (error) {
						alert('NVPR plugin failed with error: ' + error.toString());
					}

					try {
						init();
						animate();
					} catch (e) {
						console.log(e);
					}
				});

				vrState = new vr.State();

				function init() {
					createRenderer();
					getWebcam();
				}

				function createRenderer() {
					// Create a camera
					camera = new THREE.PerspectiveCamera(fov, window.innerWidth / window.innerHeight, 1, 1000);

					// Create a scene
					scene = new THREE.Scene();

					// Get the oculus rift controls and add them to the scene
					riftControls = new THREE.OculusRiftControls(camera);
					scene.add(riftControls.getObject());

					// Create renderer and apply oculus rift effect
					renderer = new THREE.WebGLRenderer({
						devicePixelRatio: 1,
						alpha: false,
						clearColor: 0xffffff,
						antialias: true
					});
					riftEffect = new THREE.OculusRiftEffect(renderer);

					// Add renderer to document
					document.body.appendChild(renderer.domElement);
				}

				function getWebcam() {
					navigator.webkitGetUserMedia({video: true, audio: false}, function(stream) {
						// Create the video element and grab the src from the webcam stream
						video = document.createElement('video');
						video.src = window.URL.createObjectURL(stream);
						video.play();

						// Create a canvas for the video
						videoImage = document.createElement('canvas');
						videoImage.width = videoWidth;
						videoImage.height = videoHeight;

						// Blank out the canvas if there is no video
						videoImageContext = videoImage.getContext('2d');
						videoImageContext.fillStyle = '#000000';
						videoImageContext.fillRect(0, 0, videoImage.width, videoImage.height);

						// Create a texture from the video image
						videoTexture = new THREE.Texture(videoImage);
						videoTexture.minFilter = THREE.LinearFilter;
						videoTexture.magFilter = THREE.LinearFilter;

						// Create a material and geometry and apply them to a mesh
						videoMaterial = new THREE.MeshBasicMaterial({
							map: videoTexture,
							overdraw: true,
							side: THREE.SingleSide
						})
						videoGeometry = new THREE.PlaneGeometry(240, videoHeight * (240 / videoWidth), 4, 4);
						videoScreen = new THREE.Mesh(videoGeometry, videoMaterial);
						videoScreen.position.set(0, 0, 0);

						// Add the video screen mesh to the scene and point the camera at it
						scene.add(videoScreen);

						camera.position.set(0, 0, 100);
						camera.lookAt(videoScreen.position);
					});
				}

				function animate() {
					requestAnimationFrame(animate);
					render();
					update();
				}

				function update() {
					// boo
				}

				function render()  {
					if (video && video.readyState === video.HAVE_ENOUGH_DATA) {
						videoImageContext.drawImage(video, 0, 0);
						if (videoTexture) {
							videoTexture.needsUpdate = true;
						}
					}

					var polled = vr.pollState(vrState);
					riftEffect.render(scene, camera, polled ? vrState : null);
				}
			})();
		</script>
	</body>
</head>